#include <stdio.h>

#include <stdlib.h>

#include <time.h>

#include "omp.h"

double start, end;

// Structure for enabling reduction on the index of elements

struct Compare

{

    int val;

    int index;

}max;

// Custom reduction for finding hte index of the max element.

#pragma omp declare reduction(maximum: struct Compare : omp_out =omp_in.val>omp_out.val ? omp_in : omp_out)

void swap(int* a, int* b);

void selectionSort(int *A, int n);

void verify(int *A, int n);

int main()

{

    int number, iter = 0;

    number = 1000;

    

    printf("\n**********************SELECTION SORT ||**********************");

    int Arr[1000] = {8914, 9287, 5799, 165, 8521, 3028, 9424, 5465, 8076, 3473,

4273, 9056, 7590, 5213, 9106, 4308, 2984, 7425, 4743, 3325, 1165, 6537,

4493, 3684, 4305, 8850, 3187, 910, 6941, 4540, 8451, 4488, 5059, 2753, 927,

2352, 9542, 6938, 5954, 5149, 3975, 3022, 3731, 8570, 8979, 7558, 5958,

7587, 59, 4569, 8082, 5294, 3896, 5639, 6429, 4767, 8054, 1653, 9832, 4427,

8608, 3565, 7150, 4395, 4390, 5005, 7231, 7110, 7358, 639, 7321, 6702, 524,

8853, 8146, 6173, 6750, 954, 8481, 6169, 6606, 6194, 4224, 6796, 4149, 2210,

2936, 1679, 5715, 3614, 6957, 681, 1702, 3083, 8773, 4388, 4905, 9630, 8864,

4363, 1357, 7435, 5590, 1584, 2418, 3767, 2806, 8095, 5827, 8842, 8396,

6277, 2283, 8687, 6387, 7362, 8366, 4220, 3591, 9203, 4988, 4661, 8285,

3516, 2766, 9173, 2848, 7283, 4965, 9048, 1277, 7690, 7595, 5197, 9862,

4423, 8642, 3738, 2079, 9652, 3016, 2746, 2613, 5355, 3281, 8912, 461, 6577,

5195, 752, 1437, 846, 3448, 7026, 3505, 5485, 3699, 5843, 1019, 4887, 3391,

2476, 1958, 7592, 3474, 589, 5319, 4796, 8982, 6302, 466, 9422, 19, 4463,

7610, 9193, 351, 9183, 8513, 676, 6453, 6384, 1220, 4668, 2845, 2561, 6931,

9187, 180, 1442, 5082, 6145, 2380, 7460, 959, 7797, 4152, 2240, 3886, 1638,

4323, 7841, 3005, 9057, 9186, 5189, 1248, 7958, 2991, 4798, 8371, 7685,

2866, 1772, 1101, 792, 9362, 8206, 3781, 856, 4317, 2077, 7584, 7496, 3969,

5263, 7940, 2854, 875, 101, 1999, 9611, 3876, 7828, 3861, 8118, 8765, 2123,

7095, 3444, 6827, 6182, 742, 9309, 7572, 2577, 1100, 5524, 5098, 8136, 2616,

9441, 9642, 5365, 735, 6029, 1850, 169, 5078, 7892, 4339, 2355, 5377, 4942,

7727, 1587, 1018, 8495, 6905, 2924, 4549, 1626, 6373, 7886, 1715, 1907,

1479, 5361, 8549, 4116, 7053, 3500, 7664, 921, 6565, 4992, 6550, 5399, 3626,

1986, 4733, 9325, 4817, 6056, 8487, 6012, 459, 2475, 864, 7028, 5593, 2057,

3246, 3290, 4013, 6715, 3206, 9773, 2964, 828, 9225, 2026, 4826, 6712, 3540,

6262, 6197, 198, 3599, 9172, 4729, 9087, 3722, 1090, 3748, 2686, 8102, 8143,

2814, 7870, 5917, 4895, 173, 2606, 6158, 419, 847, 1407, 893, 6604, 2291,

4995, 8812, 52, 2750, 631, 4367, 528, 8069, 1088, 9589, 597, 149, 3594, 665,

8994, 5595, 3710, 3239, 4612, 2573, 1266, 3080, 3202, 8752, 4413, 7662,

6237, 5093, 725, 1568, 5678, 2714, 3703, 2069, 9023, 3789, 186, 6860, 3578,

3274, 8889, 3567, 2681, 1241, 3200, 2259, 1560, 1687, 2275, 707, 5562, 9141,

8007, 7160, 3209, 6229, 8351, 8465, 7655, 9299, 9932, 6469, 815, 6143, 6250,

9867, 8074, 7311, 2537, 7830, 4079, 6681, 9244, 210, 2517, 8644, 298, 39,

8307, 1667, 87, 8261, 731, 9921, 2132, 5910, 6227, 9493, 1414, 4477, 4357,

8094, 5139, 3856, 8376, 7752, 3109, 2663, 6836, 1690, 1548, 8257, 8663,

8600, 4786, 3496, 2514, 6817, 1743, 3450, 3416, 5669, 8846, 3863, 9058,

4103, 5555, 2617, 5989, 9139, 8128, 3782, 1332, 2019, 6779, 291, 3465, 1619,

9712, 1910, 404, 4744, 453, 7444, 9028, 5133, 12, 7710, 7823, 4924, 5883,

2932, 9083, 8310, 648, 6554, 5615, 5173, 2177, 620, 4171, 3900, 7787, 6052,

116, 7237, 5349, 7559, 2383, 3420, 2662, 9679, 9365, 1791, 7796, 4156, 7997,

6610, 5331, 8554, 6996, 2502, 4316, 5375, 1849, 363, 4621, 4641, 8943, 5889,

2594, 9743, 5337, 6246, 2449, 6753, 6951, 9343, 6504, 1268, 7180, 974, 8921,

4245, 3526, 1217, 8930, 6240, 2203, 6191, 1693, 7678, 361, 118, 4497, 1163,

3130, 4460, 3123, 4258, 8845, 3491, 413, 4586, 7282, 1841, 4740, 4964, 9078,

3296, 6811, 595, 8925, 7975, 3851, 4519, 9966, 4999, 812, 1416, 1467, 691,

3285, 7596, 9854, 8215, 3923, 8472, 7459, 8339, 790, 6028, 8162, 2229, 2684,

8313, 1452, 449, 9997, 2339, 6510, 2407, 998, 4579, 5400, 3686, 299, 5547,

3494, 3548, 6560, 2305, 9924, 1204, 603, 8473, 7365, 2668, 5658, 477, 7571,

3015, 9443, 2934, 8416, 4134, 2558, 624, 8509, 7661, 568, 2764, 5570, 9782,

1099, 4726, 9137, 1317, 793, 2988, 426, 3134, 1258, 4830, 9360, 2968, 4404,

2222, 777, 8409, 5691, 798, 4473, 8589, 6620, 9922, 457, 9886, 659, 3787,

7031, 9876, 7686, 6902, 483, 8117, 2947, 9863, 9492, 7534, 6342, 7547, 8312,

7692, 5941, 7292, 1737, 253, 2943, 6789, 326, 7399, 4422, 471, 6513, 3482,

4715, 7401, 1150, 129, 285, 9184, 8801, 3619, 9817, 6114, 6516, 8222, 6806,

6716, 3263, 1847, 7138, 5328, 698, 9177, 9865, 2658, 8104, 1739, 1132, 7862,

8562, 1075, 9081, 2158, 5831, 6880, 8557, 3397, 3362, 2498, 9194, 7090,

1289, 440, 9597, 5589, 2214, 1529, 8289, 8266, 1533, 4855, 7206, 7915, 2699,

6377, 378, 5090, 6541, 3273, 4574, 2154, 9625, 128, 7497, 1758, 6964, 2070,

6300, 625, 5732, 3793, 5632, 5351, 6291, 9914, 2545, 626, 5277, 1005, 1179,

4533, 3685, 7569, 2436, 2901, 3312, 4322, 93, 2624, 7377, 9947, 7696, 9675,

76, 2771, 6740, 1422, 8492, 3368, 559, 8671, 1592, 851, 8702, 2763, 6390,

5074, 8874, 3440, 9191, 6243, 3184, 579, 3268, 5055, 2468, 3097, 6831, 885,

1840, 6890, 4478, 3354, 6838, 3098, 7089, 6878, 441, 9785, 5683, 7294, 9883,

2975, 543, 8915, 8277, 4901, 8748, 8201, 5031, 835, 3166, 1900, 2533, 3733,

5854, 7701, 9039, 8294, 6409, 1430, 8224, 2825, 3768, 3642, 3475, 3828, 288,

9676, 7102, 9430, 8167, 9179, 1915, 6499, 4979, 6424, 7091, 9693, 521, 863,

8296, 5812, 308, 7363, 3048, 5940, 2039, 7256, 3771, 3051, 2126, 7903, 3454,

2887, 6752, 158, 9521, 1645, 9328, 5550, 4155, 8583, 3728, 9315, 2673, 901,

5490, 2384, 242, 8127, 9434, 1080, 6367, 5436, 7130, 2219, 4950, 1155, 6689,

6263, 2015, 6494, 5795, 1918, 8991, 5947, 9753, 4018, 7850, 5772, 5240,

5080, 7106, 3687, 9548, 785, 9688, 552, 8130, 6629, 1256, 3467, 3136, 934,

5905, 353, 1343, 7220, 6979, 4209, 3238, 7682, 6538, 1359, 7381, 1711, 8611,

9065, 5979, 192, 2581, 6305, 6181, 5279, 1984, 2589, 4642, 8148, 4275, 9783,

5864, 5684, 3076, 3113, 6523, 6713, 7227, 8237, 1649, 4682, 6119, 9615,

9281, 2389, 3382, 2491, 5146, 1030, 1192, 7461, 9345, 9397, 4180, 4739,

2688, 4426, 7939, 8323, 2024, 6336, 7622, 159, 9928, 5323, 4089, 904, 7000,

4696, 7192, 3026, 9072, 2595, 319, 8402, 2754, 8830, 4577, 5528, 8013, 6375,

6061, 4947, 2770, 8784, 6327, 7519, 5433, 8096, 2596, 1026, 8989, 3385,

6684, 3041, 6490};



    start = omp_get_wtime();

    selectionSort(Arr, number);

    end = omp_get_wtime();

    for (int iter = 0; iter < number; iter++)

    {

        printf("%d ", Arr[iter]);

    }

    // Verify if the algorithm works as advised

    verify(Arr, number);

    printf("\nTime taken for sort: %f\n", end - start);

    return 0;

}

void selectionSort(int *A, int n)

{

    for (int startpos = 0; startpos < n; startpos++)

    {

        // Declare the structure required for reductionstruct Compare max;

        // Initialize the variables

        max.val = A[startpos];

        max.index = startpos;

        // Parallel for loop with custom reduction, at the end of the loop, max will have the max element and its index.

#pragma omp parallel for reduction(maximum : max)

            for (int i = startpos + 1; i < n; ++i)

        {

            if (A[i] > max.val)

            {

                max.val = A[i];

                max.index = i;

            }

        }

        swap(&A[startpos], &A[max.index]);

    }

}

// Verification function

void verify(int *A, int n)

{

    int failcount = 0;

    for (int iter = 0; iter < n - 1; iter++)

    {

        if (A[iter] < A[iter + 1])

        {

            failcount++;

        }

    }

    printf("\nFail count: %d\n", failcount);

}

// Swap function

void swap(int *a, int *b)

{

    int temp = *a;

    *a = *b;

    *b = temp;

}
